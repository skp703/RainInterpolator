/*
 * Copyright (C) 2015 saurav
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.vt.owml.saurav.raininterpolation.inputbuilder;

import edu.vt.owml.saurav.raininterpolation.inputbuilder.ParseShapefiles.GeometryTypeString;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author saurav
 */
public class MainGUI extends javax.swing.JFrame {

    private InputStore is;
    private LastState ls;
    public static Color Okay = Color.green;
    public static Color notOkay = Color.red;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
        ls = new LastState();
        is = new InputStore();
        fileChooser.setCurrentDirectory(new File(ls.getLastFileOpenDirectory()));
        messagesPane.setEditable(false);
        messagesPane.setContentType("text/html");
    }

    private void appendToMessage(String s, boolean red) {
        try {
            System.out.println("s = " + s);
            String text = "";
            if (red) {
                text = "<span style=\"color:red\">" + s + "</span>";
            } else {
                text = "<span >" + s + "</span>";
            }
            HTMLDocument doc = (HTMLDocument) messagesPane.getDocument();
            HTMLEditorKit editorKit = (HTMLEditorKit) messagesPane.getEditorKit();

            editorKit.insertHTML(doc, doc.getLength(), text, 0, 0, null);
        } catch (BadLocationException | IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        stationLabel = new javax.swing.JLabel();
        watershedLabel = new javax.swing.JLabel();
        dataLabel = new javax.swing.JLabel();
        selectStationButton = new javax.swing.JButton();
        selectWatershedButton = new javax.swing.JButton();
        selectDataButton = new javax.swing.JButton();
        stationShapefileLabel = new javax.swing.JLabel();
        watershedShapefileLabel = new javax.swing.JLabel();
        rainValuesLabel = new javax.swing.JLabel();
        attributeCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagesPane = new javax.swing.JTextPane();
        renderGridButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenMenu = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rain Interpolator");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Files"));

        stationLabel.setBackground(notOkay);
        stationLabel.setLabelFor(selectStationButton);
        stationLabel.setText("Rain Stations Point Shapefile");
        stationLabel.setOpaque(true);

        watershedLabel.setBackground(notOkay);
        watershedLabel.setLabelFor(selectWatershedButton);
        watershedLabel.setText("Wateshed Shapefile");
        watershedLabel.setOpaque(true);

        dataLabel.setBackground(notOkay);
        dataLabel.setLabelFor(selectDataButton);
        dataLabel.setText("Rain values (all in same units)");
        dataLabel.setOpaque(true);

        selectStationButton.setText("Select");
        selectStationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStationButtonActionPerformed(evt);
            }
        });

        selectWatershedButton.setText("Select");
        selectWatershedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectWatershedButtonActionPerformed(evt);
            }
        });

        selectDataButton.setText("Select");
        selectDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDataButtonActionPerformed(evt);
            }
        });

        stationShapefileLabel.setText(" ");

        watershedShapefileLabel.setText(" ");

        rainValuesLabel.setText(" ");

        attributeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "attributes" }));
        attributeCombo.setEnabled(false);
        attributeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeComboActionPerformed(evt);
            }
        });

        jLabel4.setText("Station name col");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(dataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectDataButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(watershedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectWatershedButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(stationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectStationButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(stationShapefileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attributeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(watershedShapefileLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rainValuesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectStationButton)
                    .addComponent(stationShapefileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attributeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(stationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(watershedShapefileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectWatershedButton)
                    .addComponent(watershedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rainValuesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectDataButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(dataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Messages"));
        jScrollPane1.setViewportView(messagesPane);

        renderGridButton.setText("View Grid");
        renderGridButton.setEnabled(false);
        renderGridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renderGridButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        OpenMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open.gif"))); // NOI18N
        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        jMenu1.add(OpenMenu);

        SaveMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.gif"))); // NOI18N
        SaveMenu.setText("Save");
        SaveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(SaveMenu);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(renderGridButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(renderGridButton)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetPoints() {
        stationLabel.setBackground(notOkay);
        attributeCombo.setEnabled(false);
        stationShapefileLabel.setText(" ");
        checkEnableViewGrid();
    }

    private static String expand(List<String> ss) {
        String ret = "";
        for (String s : ss) {
            ret = ret + s + ",";
        }
        return ret;
    }

    private void printStationNames() {
        try {
            List<String> readAttributes = ParseShapefiles.readAttributes(is.stationsFile, is.attributeForStationLabel);
            appendToMessage("Attribute values: " + expand(readAttributes), false);
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void selectStationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStationButtonActionPerformed
        // Show shapefile chooser
        // Checks:1) shapefile has coordinate system defined,  has points, and has a attribute with label that has "name" in it.
        fileChooser.setFileFilter(new FileNameExtensionFilter("Shape File", "shp"));
        int showOpenDialog = fileChooser.showOpenDialog(this);
        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                ParseShapefiles.ShapeFileDesc desc = ParseShapefiles.findDescription(selectedFile);

                if (desc.type == GeometryTypeString.POINT) {
                    if (desc.projectionSystem != null) {
                        appendToMessage("Points projection system: " + desc.projectionSystem, false);
                        if (desc.labels.size() > 1) {
                            is.setStationsFile(selectedFile);
                            attributeCombo.setModel(new DefaultComboBoxModel(desc.labels.toArray()));
                            attributeCombo.setEnabled(true);
                            attributeCombo.setSelectedIndex(1);
                            is.setAttributeForStationLabel((String) attributeCombo.getSelectedItem());
                            stationLabel.setBackground(Okay);
                            stationShapefileLabel.setText(selectedFile.getName());
                            checkEnableViewGrid();
                            //printStationNames();
                        } else {
                            appendToMessage("No attribute column with label found. Where are station labels? ", true);
                            resetPoints();
                        }
                    } else {
                        appendToMessage("No projection system found for the shapefile. <TODO: Helpful hint> Points projection system is NULL ", true);
                        resetPoints();
                    }
                } else {
                    appendToMessage("Should be a Point type shapefile, found:  " + desc.type.name(), true);
                    resetPoints();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class
                        .getName()).log(Level.SEVERE, null, ex);
                appendToMessage(ex.getLocalizedMessage(), true);
                resetPoints();
            }
        }
    }//GEN-LAST:event_selectStationButtonActionPerformed

    private void attributeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeComboActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) attributeCombo.getSelectedItem();
        is.setAttributeForStationLabel((String) attributeCombo.getSelectedItem());
        printStationNames();

    }//GEN-LAST:event_attributeComboActionPerformed

    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void SaveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveMenuActionPerformed

    private void resetWatershed() {
        watershedLabel.setBackground(notOkay);
        watershedShapefileLabel.setText(" ");
        checkEnableViewGrid();
    }

    private void selectWatershedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectWatershedButtonActionPerformed
        // Show shapefile chooser
        // Checks:1) shapefile has coordinate system defined,  and is a polygon
        fileChooser.setFileFilter(new FileNameExtensionFilter("Shape File", "shp"));
        int showOpenDialog = fileChooser.showOpenDialog(this);
        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                ParseShapefiles.ShapeFileDesc desc = ParseShapefiles.findDescription(selectedFile);

                if (desc.type == GeometryTypeString.POLYGON) {
                    if (desc.projectionSystem != null) {
                        appendToMessage("Watershed projection system: " + desc.projectionSystem, false);
                        is.setWatershedFile(selectedFile);
                        watershedLabel.setBackground(Okay);
                        watershedShapefileLabel.setText(selectedFile.getName());
                        checkEnableViewGrid();
                    } else {
                        appendToMessage("No projection system found for the shapefile. <TODO: Helpful hint> Points projection system is NULL ", true);
                        resetWatershed();
                    }
                } else {
                    appendToMessage("Should be a Polygon type shapefile, found:  " + desc.type.name(), true);
                    resetWatershed();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class
                        .getName()).log(Level.SEVERE, null, ex);
                appendToMessage(ex.getLocalizedMessage(), true);
                resetWatershed();
            }
        }
    }//GEN-LAST:event_selectWatershedButtonActionPerformed

    private void checkEnableViewGrid() {
        if (stationLabel.getBackground() == Okay && watershedLabel.getBackground() == Okay && dataLabel.getBackground() == Okay) {
            renderGridButton.setEnabled(true);
        } else {
            renderGridButton.setEnabled(false);
        }
    }
    private void selectDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDataButtonActionPerformed
        // TODO code to add CSV file and also check first line has sations
        dataLabel.setBackground(Okay);
        checkEnableViewGrid();
    }//GEN-LAST:event_selectDataButtonActionPerformed

    private void renderGridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renderGridButtonActionPerformed
        // render watershed, points and dummy grid .. change the size of the dummy grid based on the points.
    }//GEN-LAST:event_renderGridButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JComboBox attributeCombo;
    private javax.swing.JLabel dataLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane messagesPane;
    private javax.swing.JLabel rainValuesLabel;
    private javax.swing.JButton renderGridButton;
    private javax.swing.JButton selectDataButton;
    private javax.swing.JButton selectStationButton;
    private javax.swing.JButton selectWatershedButton;
    private javax.swing.JLabel stationLabel;
    private javax.swing.JLabel stationShapefileLabel;
    private javax.swing.JLabel watershedLabel;
    private javax.swing.JLabel watershedShapefileLabel;
    // End of variables declaration//GEN-END:variables
}
